package binary

// k桁目のビットが1かどうかを判定（一番右を１桁目とする）
func IsBitPop(num uint64, k int) bool {
	// 1 << (k - 1)はビットマスク。1をk - 1桁左にシフトすることで、k桁目のみが1で他の桁が0の二進数を作る。
	// numとビットマスクの論理積（各桁について、numとビットマスクが両方trueならtrue）を作り、その結果が0でないかどうかで判定できる
	return (num & (1 << (k - 1))) != 0
}

// // k桁目のビットが立っていれば0に、立っていなければ1にする（一番右を１桁目とする）
// func BitFlip(num uint64, k int) uint64 {
// 	// 1 << (k - 1)はビットマスク。1をk - 1桁左にシフトすることで、k桁目のみが1で他の桁が0の二進数を作る。
// 	// numとビットマスクの排他的論理和（各桁について、numとビットマスクのどちらか一方がtrueならtrue）を作る
// 	return num ^ (1 << (k - 1))
// }
